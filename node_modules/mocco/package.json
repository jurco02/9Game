{
  "name": "mocco",
  "version": "1.0.0",
  "description": "Simple mock library for Node.js modules",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.6.x",
    "should": "1.2.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/JakubMrozek/mocco.git"
  },
  "author": {
    "name": "Jakub Mrozek",
    "email": "jakub.mrozek@gmail.com"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.8.x",
    "npm": "1.1.x"
  },
  "readme": "[![Build Status](https://travis-ci.org/JakubMrozek/mocco.png)](https://travis-ci.org/JakubMrozek/mocco)\r\n\r\n# Mocco\r\n\r\nMocco is simple mock library. It is very useful for mocking Node.js modules.\r\n\r\n## Installation\r\n\r\n    $ npm install mocco\r\n\r\n## Example\r\n\r\n```javascript\r\nvar mocco = require('mocco');\r\n\r\n//example class\r\nfunction Person(){}\r\nPerson.prototype.age = function(){\r\n  return 42;\r\n};\r\nvar person = new Person();\r\nperson.age(); //returns 42\r\n\r\n//create Mocco class\r\nvar mock = mocco.mock(person);\r\n\r\n//we need a special implementation of age() for tests:\r\nmock.hijack(function age(){\r\n  return 22;\r\n});\r\n\r\n//or we can do it with name and function\r\nmock.hijack('age', function(){\r\n  return 22;\r\n});\r\n\r\n//and call it\r\nperson.age(); //new returns 22, not 42\r\n\r\n//after tests we restore our method to the original implementation\r\nmock.restore('age');\r\n\r\n//or we can restore all methods of Person object\r\nmock.restore();\r\n\r\n//or we can restore all methods of all objects\r\nmocco.restore();\r\n\r\n```\r\n\r\n## License \r\n\r\nMIT ",
  "readmeFilename": "README.md",
  "_id": "mocco@1.0.0",
  "dist": {
    "shasum": "7e71aadd5a79a5f4237b46b1fdeae669daa73e6c"
  },
  "_from": "mocco@1.0.x",
  "_resolved": "https://registry.npmjs.org/mocco/-/mocco-1.0.0.tgz"
}
